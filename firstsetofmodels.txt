#============================================================

# Rattle is Copyright (c) 2006-2017 Togaware Pty Ltd.
# It is open source software and is freely available.
# It is licensed under the GNU General Public License,
# Version 2. Rattle comes with ABSOLUTELY NO WARRANTY.
# Rattle was written by Graham Williams with contributions
# from others as acknowledged in 'library(help=rattle)'.
# Visit https://rattle.togaware.com/ for details.

#============================================================
# Rattle timestamp: 2018-02-17 15:41:57 x86_64-w64-mingw32 

# Rattle version 5.1.0 user 'Venkat'

# This log captures Rattle interactions as an R script. 

# For repeatability export this log of all activity to a 
# file using the Export button or the Tools menu. This 
# script can serve as a starting point for developing your 
# own scripts. Exporting to a file called 'model.R' will 
# allow you to type into a new R Console the command 
#"source('model.R')" and so repeat all actions. Generally, 
# you will want to edit the file to suit your own needs. 
# You can also edit this log in place to record additional 
# information before exporting the script. 
 
# Note that saving/loading projects retains this log.

# We begin most scripts by loading the required packages.
# Here are some initial packages to load and others will be
# identified as we proceed through the script. When writing
# our own scripts we often collect together the library
# commands at the beginning of the script here.

library(rattle)   # Access weather dataset and utilities.
library(magrittr) # For the %>% and %<>% pipeline operators.

# This log generally records the process of building a model. 
# However, with very little effort the log can also be used 
# to score a new dataset. The logical variable 'building' 
# is used to toggle between generating transformations, 
# when building a model and using the transformations, 
# when scoring a dataset.

building <- TRUE
scoring  <- ! building

# A pre-defined value is used to reset the random seed 
# so that results are repeatable.

crv$seed <- 42 

#============================================================
# Rattle timestamp: 2018-02-17 15:42:18 x86_64-w64-mingw32 

# Load an R data frame.

crs$dataset <- modifieddata

# Display a simple summary (structure) of the dataset.

str(crs$dataset)

#============================================================
# Rattle timestamp: 2018-02-17 15:42:34 x86_64-w64-mingw32 

# Note the user selections. 

# Build the train/validate/test datasets.

# nobs=38462 train=26923 validate=5769 test=5770

set.seed(crv$seed)

crs$nobs     <- nrow(crs$dataset)
crs$train    <- crs$sample <- sample(crs$nobs, 0.7*crs$nobs)
crs$validate <- sample(setdiff(seq_len(crs$nobs), crs$train), 0.15*crs$nobs)
crs$test     <- setdiff(setdiff(seq_len(crs$nobs), crs$train), crs$validate)

# The following variable selections have been noted.

crs$input     <- c("url", "timedelta", "n_tokens_title", "n_tokens_content",
                   "n_unique_tokens", "n_non_stop_words",
                   "n_non_stop_unique_tokens", "num_hrefs", "num_self_hrefs",
                   "num_imgs", "num_videos", "average_token_length",
                   "num_keywords", "data_channel_is_lifestyle",
                   "data_channel_is_entertainment", "data_channel_is_bus",
                   "data_channel_is_socmed", "data_channel_is_tech",
                   "data_channel_is_world", "kw_min_min", "kw_max_min",
                   "kw_avg_min", "kw_min_max", "kw_max_max", "kw_avg_max",
                   "kw_min_avg", "kw_max_avg", "kw_avg_avg",
                   "self_reference_min_shares", "self_reference_max_shares",
                   "self_reference_avg_sharess", "weekday_is_monday",
                   "weekday_is_tuesday", "weekday_is_wednesday",
                   "weekday_is_thursday", "weekday_is_friday",
                   "weekday_is_saturday", "weekday_is_sunday", "is_weekend",
                   "LDA_00", "LDA_01", "LDA_02", "LDA_03", "LDA_04",
                   "global_subjectivity", "global_sentiment_polarity",
                   "global_rate_positive_words", "global_rate_negative_words",
                   "rate_positive_words", "rate_negative_words",
                   "avg_positive_polarity", "min_positive_polarity",
                   "max_positive_polarity", "avg_negative_polarity",
                   "min_negative_polarity", "max_negative_polarity",
                   "title_subjectivity", "title_sentiment_polarity",
                   "abs_title_subjectivity", "abs_title_sentiment_polarity",
                   "shares", "normalizedshare")

crs$numeric   <- c("timedelta", "n_tokens_title", "n_tokens_content",
                   "n_unique_tokens", "n_non_stop_words",
                   "n_non_stop_unique_tokens", "num_hrefs", "num_self_hrefs",
                   "num_imgs", "num_videos", "average_token_length",
                   "num_keywords", "data_channel_is_lifestyle",
                   "data_channel_is_entertainment", "data_channel_is_bus",
                   "data_channel_is_socmed", "data_channel_is_tech",
                   "data_channel_is_world", "kw_min_min", "kw_max_min",
                   "kw_avg_min", "kw_min_max", "kw_max_max", "kw_avg_max",
                   "kw_min_avg", "kw_max_avg", "kw_avg_avg",
                   "self_reference_min_shares", "self_reference_max_shares",
                   "self_reference_avg_sharess", "weekday_is_monday",
                   "weekday_is_tuesday", "weekday_is_wednesday",
                   "weekday_is_thursday", "weekday_is_friday",
                   "weekday_is_saturday", "weekday_is_sunday", "is_weekend",
                   "LDA_00", "LDA_01", "LDA_02", "LDA_03", "LDA_04",
                   "global_subjectivity", "global_sentiment_polarity",
                   "global_rate_positive_words", "global_rate_negative_words",
                   "rate_positive_words", "rate_negative_words",
                   "avg_positive_polarity", "min_positive_polarity",
                   "max_positive_polarity", "avg_negative_polarity",
                   "min_negative_polarity", "max_negative_polarity",
                   "title_subjectivity", "title_sentiment_polarity",
                   "abs_title_subjectivity", "abs_title_sentiment_polarity",
                   "shares", "normalizedshare")

crs$categoric <- "url"

crs$target    <- "popularity"
crs$risk      <- NULL
crs$ident     <- NULL
crs$ignore    <- NULL
crs$weights   <- NULL

#============================================================
# Rattle timestamp: 2018-02-17 15:43:38 x86_64-w64-mingw32 

# Note the user selections. 

# Build the train/validate/test datasets.

# nobs=38462 train=26923 validate=5769 test=5770

set.seed(crv$seed)

crs$nobs     <- nrow(crs$dataset)
crs$train    <- crs$sample <- sample(crs$nobs, 0.7*crs$nobs)
crs$validate <- sample(setdiff(seq_len(crs$nobs), crs$train), 0.15*crs$nobs)
crs$test     <- setdiff(setdiff(seq_len(crs$nobs), crs$train), crs$validate)

# The following variable selections have been noted.

crs$input     <- c("n_tokens_title", "n_tokens_content", "n_unique_tokens",
                   "n_non_stop_words", "n_non_stop_unique_tokens", "num_hrefs",
                   "num_self_hrefs", "num_imgs", "num_videos",
                   "average_token_length", "num_keywords",
                   "data_channel_is_lifestyle",
                   "data_channel_is_entertainment", "data_channel_is_bus",
                   "data_channel_is_socmed", "data_channel_is_tech",
                   "data_channel_is_world", "kw_min_min", "kw_max_min",
                   "kw_avg_min", "kw_min_max", "kw_max_max", "kw_avg_max",
                   "kw_min_avg", "kw_max_avg", "kw_avg_avg",
                   "self_reference_min_shares", "self_reference_max_shares",
                   "self_reference_avg_sharess", "weekday_is_monday",
                   "weekday_is_tuesday", "weekday_is_wednesday",
                   "weekday_is_thursday", "weekday_is_friday",
                   "weekday_is_saturday", "weekday_is_sunday", "is_weekend",
                   "LDA_00", "LDA_01", "LDA_02", "LDA_03", "LDA_04",
                   "global_subjectivity", "global_sentiment_polarity",
                   "global_rate_positive_words", "global_rate_negative_words",
                   "rate_positive_words", "rate_negative_words",
                   "avg_positive_polarity", "min_positive_polarity",
                   "max_positive_polarity", "avg_negative_polarity",
                   "min_negative_polarity", "max_negative_polarity",
                   "title_subjectivity", "title_sentiment_polarity",
                   "abs_title_subjectivity", "abs_title_sentiment_polarity",
                   "shares", "normalizedshare")

crs$numeric   <- c("n_tokens_title", "n_tokens_content", "n_unique_tokens",
                   "n_non_stop_words", "n_non_stop_unique_tokens", "num_hrefs",
                   "num_self_hrefs", "num_imgs", "num_videos",
                   "average_token_length", "num_keywords",
                   "data_channel_is_lifestyle",
                   "data_channel_is_entertainment", "data_channel_is_bus",
                   "data_channel_is_socmed", "data_channel_is_tech",
                   "data_channel_is_world", "kw_min_min", "kw_max_min",
                   "kw_avg_min", "kw_min_max", "kw_max_max", "kw_avg_max",
                   "kw_min_avg", "kw_max_avg", "kw_avg_avg",
                   "self_reference_min_shares", "self_reference_max_shares",
                   "self_reference_avg_sharess", "weekday_is_monday",
                   "weekday_is_tuesday", "weekday_is_wednesday",
                   "weekday_is_thursday", "weekday_is_friday",
                   "weekday_is_saturday", "weekday_is_sunday", "is_weekend",
                   "LDA_00", "LDA_01", "LDA_02", "LDA_03", "LDA_04",
                   "global_subjectivity", "global_sentiment_polarity",
                   "global_rate_positive_words", "global_rate_negative_words",
                   "rate_positive_words", "rate_negative_words",
                   "avg_positive_polarity", "min_positive_polarity",
                   "max_positive_polarity", "avg_negative_polarity",
                   "min_negative_polarity", "max_negative_polarity",
                   "title_subjectivity", "title_sentiment_polarity",
                   "abs_title_subjectivity", "abs_title_sentiment_polarity",
                   "shares", "normalizedshare")

crs$categoric <- NULL

crs$target    <- "popularity"
crs$risk      <- NULL
crs$ident     <- "url"
crs$ignore    <- "timedelta"
crs$weights   <- NULL

#============================================================
# Rattle timestamp: 2018-02-17 15:43:56 x86_64-w64-mingw32 

# The 'Hmisc' package provides the 'contents' function.

library(Hmisc, quietly=TRUE)

# Obtain a summary of the dataset.

contents(crs$dataset[crs$sample, c(crs$input, crs$risk, crs$target)])
summary(crs$dataset[crs$sample, c(crs$input, crs$risk, crs$target)])

# The 'skewness' package provides the 'fBasics' function.

library(fBasics, quietly=TRUE)

# Summarise the skewness of the numeric data.

skewness(crs$dataset[crs$sample, c(crs$input, crs$risk, crs$target)][,c(1:61)], na.rm=TRUE)

#============================================================
# Rattle timestamp: 2018-02-17 16:05:29 x86_64-w64-mingw32 

# Load an R data frame.

crs$dataset <- modifieddata

# Display a simple summary (structure) of the dataset.

str(crs$dataset)

#============================================================
# Rattle timestamp: 2018-02-17 16:05:44 x86_64-w64-mingw32 

# Note the user selections. 

# Build the train/validate/test datasets.

# nobs=36847 train=25792 validate=5527 test=5528

set.seed(crv$seed)

crs$nobs     <- nrow(crs$dataset)
crs$train    <- crs$sample <- sample(crs$nobs, 0.7*crs$nobs)
crs$validate <- sample(setdiff(seq_len(crs$nobs), crs$train), 0.15*crs$nobs)
crs$test     <- setdiff(setdiff(seq_len(crs$nobs), crs$train), crs$validate)

# The following variable selections have been noted.

crs$input     <- c("url", "timedelta", "n_tokens_title", "n_tokens_content",
                   "n_unique_tokens", "n_non_stop_words",
                   "n_non_stop_unique_tokens", "num_hrefs", "num_self_hrefs",
                   "num_imgs", "num_videos", "average_token_length",
                   "num_keywords", "data_channel_is_lifestyle",
                   "data_channel_is_entertainment", "data_channel_is_bus",
                   "data_channel_is_socmed", "data_channel_is_tech",
                   "data_channel_is_world", "kw_min_min", "kw_max_min",
                   "kw_avg_min", "kw_min_max", "kw_max_max", "kw_avg_max",
                   "kw_min_avg", "kw_max_avg", "kw_avg_avg",
                   "self_reference_min_shares", "self_reference_max_shares",
                   "self_reference_avg_sharess", "weekday_is_monday",
                   "weekday_is_tuesday", "weekday_is_wednesday",
                   "weekday_is_thursday", "weekday_is_friday",
                   "weekday_is_saturday", "weekday_is_sunday", "is_weekend",
                   "LDA_00", "LDA_01", "LDA_02", "LDA_03", "LDA_04",
                   "global_subjectivity", "global_sentiment_polarity",
                   "global_rate_positive_words", "global_rate_negative_words",
                   "rate_positive_words", "rate_negative_words",
                   "avg_positive_polarity", "min_positive_polarity",
                   "max_positive_polarity", "avg_negative_polarity",
                   "min_negative_polarity", "max_negative_polarity",
                   "title_subjectivity", "title_sentiment_polarity",
                   "abs_title_subjectivity", "abs_title_sentiment_polarity",
                   "shares", "normalizedshare")

crs$numeric   <- c("timedelta", "n_tokens_title", "n_tokens_content",
                   "n_unique_tokens", "n_non_stop_words",
                   "n_non_stop_unique_tokens", "num_hrefs", "num_self_hrefs",
                   "num_imgs", "num_videos", "average_token_length",
                   "num_keywords", "data_channel_is_lifestyle",
                   "data_channel_is_entertainment", "data_channel_is_bus",
                   "data_channel_is_socmed", "data_channel_is_tech",
                   "data_channel_is_world", "kw_min_min", "kw_max_min",
                   "kw_avg_min", "kw_min_max", "kw_max_max", "kw_avg_max",
                   "kw_min_avg", "kw_max_avg", "kw_avg_avg",
                   "self_reference_min_shares", "self_reference_max_shares",
                   "self_reference_avg_sharess", "weekday_is_monday",
                   "weekday_is_tuesday", "weekday_is_wednesday",
                   "weekday_is_thursday", "weekday_is_friday",
                   "weekday_is_saturday", "weekday_is_sunday", "is_weekend",
                   "LDA_00", "LDA_01", "LDA_02", "LDA_03", "LDA_04",
                   "global_subjectivity", "global_sentiment_polarity",
                   "global_rate_positive_words", "global_rate_negative_words",
                   "rate_positive_words", "rate_negative_words",
                   "avg_positive_polarity", "min_positive_polarity",
                   "max_positive_polarity", "avg_negative_polarity",
                   "min_negative_polarity", "max_negative_polarity",
                   "title_subjectivity", "title_sentiment_polarity",
                   "abs_title_subjectivity", "abs_title_sentiment_polarity",
                   "shares", "normalizedshare")

crs$categoric <- "url"

crs$target    <- "popularity"
crs$risk      <- NULL
crs$ident     <- NULL
crs$ignore    <- NULL
crs$weights   <- NULL

#============================================================
# Rattle timestamp: 2018-02-17 16:12:52 x86_64-w64-mingw32 

# Note the user selections. 

# Build the train/validate/test datasets.

# nobs=36847 train=25792 validate=5527 test=5528

set.seed(crv$seed)

crs$nobs     <- nrow(crs$dataset)
crs$train    <- crs$sample <- sample(crs$nobs, 0.7*crs$nobs)
crs$validate <- sample(setdiff(seq_len(crs$nobs), crs$train), 0.15*crs$nobs)
crs$test     <- setdiff(setdiff(seq_len(crs$nobs), crs$train), crs$validate)

# The following variable selections have been noted.

crs$input     <- c("n_tokens_title", "n_tokens_content", "n_unique_tokens",
                   "n_non_stop_words", "n_non_stop_unique_tokens", "num_hrefs",
                   "num_self_hrefs", "num_imgs", "num_videos",
                   "average_token_length", "num_keywords",
                   "data_channel_is_lifestyle",
                   "data_channel_is_entertainment", "data_channel_is_bus",
                   "data_channel_is_socmed", "data_channel_is_tech",
                   "data_channel_is_world", "kw_avg_min", "kw_max_max",
                   "kw_avg_avg", "is_weekend", "global_subjectivity",
                   "global_sentiment_polarity", "global_rate_positive_words",
                   "rate_positive_words", "title_subjectivity",
                   "title_sentiment_polarity", "abs_title_subjectivity",
                   "abs_title_sentiment_polarity")

crs$numeric   <- c("n_tokens_title", "n_tokens_content", "n_unique_tokens",
                   "n_non_stop_words", "n_non_stop_unique_tokens", "num_hrefs",
                   "num_self_hrefs", "num_imgs", "num_videos",
                   "average_token_length", "num_keywords",
                   "data_channel_is_lifestyle",
                   "data_channel_is_entertainment", "data_channel_is_bus",
                   "data_channel_is_socmed", "data_channel_is_tech",
                   "data_channel_is_world", "kw_avg_min", "kw_max_max",
                   "kw_avg_avg", "is_weekend", "global_subjectivity",
                   "global_sentiment_polarity", "global_rate_positive_words",
                   "rate_positive_words", "title_subjectivity",
                   "title_sentiment_polarity", "abs_title_subjectivity",
                   "abs_title_sentiment_polarity")

crs$categoric <- NULL

crs$target    <- "popularity"
crs$risk      <- NULL
crs$ident     <- "url"
crs$ignore    <- c("timedelta", "kw_min_min", "kw_max_min", "kw_min_max", "kw_avg_max", "kw_min_avg", "kw_max_avg", "self_reference_min_shares", "self_reference_max_shares", "self_reference_avg_sharess", "weekday_is_monday", "weekday_is_tuesday", "weekday_is_wednesday", "weekday_is_thursday", "weekday_is_friday", "weekday_is_saturday", "weekday_is_sunday", "LDA_00", "LDA_01", "LDA_02", "LDA_03", "LDA_04", "global_rate_negative_words", "rate_negative_words", "avg_positive_polarity", "min_positive_polarity", "max_positive_polarity", "avg_negative_polarity", "min_negative_polarity", "max_negative_polarity", "shares", "normalizedshare")
crs$weights   <- NULL

#============================================================
# Rattle timestamp: 2018-02-17 16:13:13 x86_64-w64-mingw32 

# Build a Random Forest model using the traditional approach.

set.seed(crv$seed)

crs$rf <- randomForest::randomForest(popularity ~ .,
  data=crs$dataset[crs$sample, c(crs$input, crs$target)], 
  ntree=500,
  mtry=5,
  importance=TRUE,
  na.action=randomForest::na.roughfix,
  replace=FALSE)

# Generate textual output of the 'Random Forest' model.

crs$rf

# The `pROC' package implements various AUC functions.

# Calculate the Area Under the Curve (AUC).

pROC::roc(crs$rf$y, as.numeric(crs$rf$predicted))

# Calculate the AUC Confidence Interval.

pROC::ci.auc(crs$rf$y, as.numeric(crs$rf$predicted))FALSE

# List the importance of the variables.

rn <- round(randomForest::importance(crs$rf), 2)
rn[order(rn[,3], decreasing=TRUE),]

# Time taken: 2.04 mins

# Plot the error rate against the number of trees.

plot(crs$rf, main="")
legend("topright", c("OOB", "Not popular", "Popular"), text.col=1:6, lty=1:3, col=1:3)
title(main="Error Rates Random Forest modifieddata",
    sub=paste("Rattle", format(Sys.time(), "%Y-%b-%d %H:%M:%S"), Sys.info()["user"]))

#============================================================
# Rattle timestamp: 2018-02-17 16:15:59 x86_64-w64-mingw32 

# Regression model 

# Build a Regression model.

crs$glm <- glm(popularity ~ .,
    data=crs$dataset[crs$train, c(crs$input, crs$target)],
    family=binomial(link="logit"))

# Generate a textual view of the Linear model.

print(summary(crs$glm))

cat(sprintf("Log likelihood: %.3f (%d df)\n",
            logLik(crs$glm)[1],
            attr(logLik(crs$glm), "df")))

cat(sprintf("Null/Residual deviance difference: %.3f (%d df)\n",
            crs$glm$null.deviance-crs$glm$deviance,
            crs$glm$df.null-crs$glm$df.residual))

cat(sprintf("Chi-square p-value: %.8f\n",
            dchisq(crs$glm$null.deviance-crs$glm$deviance,
                   crs$glm$df.null-crs$glm$df.residual)))

cat(sprintf("Pseudo R-Square (optimistic): %.8f\n",
             cor(crs$glm$y, crs$glm$fitted.values)))

cat('\n==== ANOVA ====\n\n')
print(anova(crs$glm, test="Chisq"))
cat("\n")

# Time taken: 3.86 secs

#============================================================
# Rattle timestamp: 2018-02-17 16:16:09 x86_64-w64-mingw32 

# Support vector machine. 

# The 'kernlab' package provides the 'ksvm' function.

library(kernlab, quietly=TRUE)

# Build a Support Vector Machine model.

set.seed(crv$seed)
crs$ksvm <- ksvm(as.factor(popularity) ~ .,
      data=crs$dataset[crs$train,c(crs$input, crs$target)],
      kernel="rbfdot",
      prob.model=TRUE)

# Generate a textual view of the SVM model.

crs$ksvm

# Time taken: 6.76 mins

#============================================================
# Rattle timestamp: 2018-02-17 16:23:16 x86_64-w64-mingw32 

# Evaluate model performance on the validation dataset. 

# Generate an Error Matrix for the Random Forest model.

# Obtain the response from the Random Forest model.

crs$pr <- predict(crs$rf, newdata=na.omit(crs$dataset[crs$validate, c(crs$input, crs$target)]))

# Generate the confusion matrix showing counts.

rattle::errorMatrix(na.omit(crs$dataset[crs$validate, c(crs$input, crs$target)])$popularity, crs$pr, count=TRUE)

# Generate the confusion matrix showing proportions.

(per <- rattle::errorMatrix(na.omit(crs$dataset[crs$validate, c(crs$input, crs$target)])$popularity, crs$pr))

# Calculate the overall error percentage.

cat(100-sum(diag(per), na.rm=TRUE))

# Calculate the averaged class error percentage.

cat(mean(per[,"Error"], na.rm=TRUE))

# Generate an Error Matrix for the SVM model.

# Obtain the response from the SVM model.

crs$pr <- kernlab::predict(crs$ksvm, newdata=na.omit(crs$dataset[crs$validate, c(crs$input, crs$target)]))

# Generate the confusion matrix showing counts.

rattle::errorMatrix(na.omit(crs$dataset[crs$validate, c(crs$input, crs$target)])$popularity, crs$pr, count=TRUE)

# Generate the confusion matrix showing proportions.

(per <- rattle::errorMatrix(na.omit(crs$dataset[crs$validate, c(crs$input, crs$target)])$popularity, crs$pr))

# Calculate the overall error percentage.

cat(100-sum(diag(per), na.rm=TRUE))

# Calculate the averaged class error percentage.

cat(mean(per[,"Error"], na.rm=TRUE))

# Generate an Error Matrix for the Linear model.

# Obtain the response from the Linear model.

crs$pr <- as.vector(ifelse(predict(crs$glm, 
   type    = "response",
   newdata = crs$dataset[crs$validate, c(crs$input, crs$target)]) > 0.5, "Popular", "Not popular"))

# Generate the confusion matrix showing counts.

rattle::errorMatrix(crs$dataset[crs$validate, c(crs$input, crs$target)]$popularity, crs$pr, count=TRUE)

# Generate the confusion matrix showing proportions.

(per <- rattle::errorMatrix(crs$dataset[crs$validate, c(crs$input, crs$target)]$popularity, crs$pr))

# Calculate the overall error percentage.

cat(100-sum(diag(per), na.rm=TRUE))

# Calculate the averaged class error percentage.

cat(mean(per[,"Error"], na.rm=TRUE))

#============================================================
# Rattle timestamp: 2018-02-17 16:24:05 x86_64-w64-mingw32 

# Evaluate model performance on the validation dataset. 

# ROC Curve: requires the ROCR package.

library(ROCR)

# ROC Curve: requires the ggplot2 package.

library(ggplot2, quietly=TRUE)

# Generate an ROC Curve for the rf model on modifieddata [validate].

crs$pr <- predict(crs$rf, newdata=na.omit(crs$dataset[crs$validate, c(crs$input, crs$target)]),
    type    = "prob")[,2]

# Remove observations with missing target.

no.miss   <- na.omit(na.omit(crs$dataset[crs$validate, c(crs$input, crs$target)])$popularity)
miss.list <- attr(no.miss, "na.action")
attributes(no.miss) <- NULL

if (length(miss.list))
{
  pred <- prediction(crs$pr[-miss.list], no.miss)
} else
{
  pred <- prediction(crs$pr, no.miss)
}

pe <- performance(pred, "tpr", "fpr")
au <- performance(pred, "auc")@y.values[[1]]
pd <- data.frame(fpr=unlist(pe@x.values), tpr=unlist(pe@y.values))
p <- ggplot(pd, aes(x=fpr, y=tpr))
p <- p + geom_line(colour="red")
p <- p + xlab("False Positive Rate") + ylab("True Positive Rate")
p <- p + ggtitle("ROC Curve Random Forest modifieddata [validate] popularity")
p <- p + theme(plot.title=element_text(size=10))
p <- p + geom_line(data=data.frame(), aes(x=c(0,1), y=c(0,1)), colour="grey")
p <- p + annotate("text", x=0.50, y=0.00, hjust=0, vjust=0, size=5,
                   label=paste("AUC =", round(au, 2)))
print(p)

# Calculate the area under the curve for the plot.


# Remove observations with missing target.

no.miss   <- na.omit(na.omit(crs$dataset[crs$validate, c(crs$input, crs$target)])$popularity)
miss.list <- attr(no.miss, "na.action")
attributes(no.miss) <- NULL

if (length(miss.list))
{
  pred <- prediction(crs$pr[-miss.list], no.miss)
} else
{
  pred <- prediction(crs$pr, no.miss)
}
performance(pred, "auc")

# ROC Curve: requires the ROCR package.

library(ROCR)

# ROC Curve: requires the ggplot2 package.

library(ggplot2, quietly=TRUE)

# Generate an ROC Curve for the ksvm model on modifieddata [validate].

crs$pr <- kernlab::predict(crs$ksvm, newdata=na.omit(crs$dataset[crs$validate, c(crs$input, crs$target)]),
    type    = "probabilities")[,2]

# Remove observations with missing target.

no.miss   <- na.omit(na.omit(crs$dataset[crs$validate, c(crs$input, crs$target)])$popularity)
miss.list <- attr(no.miss, "na.action")
attributes(no.miss) <- NULL

if (length(miss.list))
{
  pred <- prediction(crs$pr[-miss.list], no.miss)
} else
{
  pred <- prediction(crs$pr, no.miss)
}

pe <- performance(pred, "tpr", "fpr")
au <- performance(pred, "auc")@y.values[[1]]
pd <- data.frame(fpr=unlist(pe@x.values), tpr=unlist(pe@y.values))
p <- ggplot(pd, aes(x=fpr, y=tpr))
p <- p + geom_line(colour="red")
p <- p + xlab("False Positive Rate") + ylab("True Positive Rate")
p <- p + ggtitle("ROC Curve SVM modifieddata [validate] popularity")
p <- p + theme(plot.title=element_text(size=10))
p <- p + geom_line(data=data.frame(), aes(x=c(0,1), y=c(0,1)), colour="grey")
p <- p + annotate("text", x=0.50, y=0.00, hjust=0, vjust=0, size=5,
                   label=paste("AUC =", round(au, 2)))
print(p)

# Calculate the area under the curve for the plot.


# Remove observations with missing target.

no.miss   <- na.omit(na.omit(crs$dataset[crs$validate, c(crs$input, crs$target)])$popularity)
miss.list <- attr(no.miss, "na.action")
attributes(no.miss) <- NULL

if (length(miss.list))
{
  pred <- prediction(crs$pr[-miss.list], no.miss)
} else
{
  pred <- prediction(crs$pr, no.miss)
}
performance(pred, "auc")

# ROC Curve: requires the ROCR package.

library(ROCR)

# ROC Curve: requires the ggplot2 package.

library(ggplot2, quietly=TRUE)

# Generate an ROC Curve for the glm model on modifieddata [validate].

crs$pr <- predict(crs$glm, 
   type    = "response",
   newdata = crs$dataset[crs$validate, c(crs$input, crs$target)])

# Remove observations with missing target.

no.miss   <- na.omit(crs$dataset[crs$validate, c(crs$input, crs$target)]$popularity)
miss.list <- attr(no.miss, "na.action")
attributes(no.miss) <- NULL

if (length(miss.list))
{
  pred <- prediction(crs$pr[-miss.list], no.miss)
} else
{
  pred <- prediction(crs$pr, no.miss)
}

pe <- performance(pred, "tpr", "fpr")
au <- performance(pred, "auc")@y.values[[1]]
pd <- data.frame(fpr=unlist(pe@x.values), tpr=unlist(pe@y.values))
p <- ggplot(pd, aes(x=fpr, y=tpr))
p <- p + geom_line(colour="red")
p <- p + xlab("False Positive Rate") + ylab("True Positive Rate")
p <- p + ggtitle("ROC Curve Linear modifieddata [validate] popularity")
p <- p + theme(plot.title=element_text(size=10))
p <- p + geom_line(data=data.frame(), aes(x=c(0,1), y=c(0,1)), colour="grey")
p <- p + annotate("text", x=0.50, y=0.00, hjust=0, vjust=0, size=5,
                   label=paste("AUC =", round(au, 2)))
print(p)

# Calculate the area under the curve for the plot.


# Remove observations with missing target.

no.miss   <- na.omit(crs$dataset[crs$validate, c(crs$input, crs$target)]$popularity)
miss.list <- attr(no.miss, "na.action")
attributes(no.miss) <- NULL

if (length(miss.list))
{
  pred <- prediction(crs$pr[-miss.list], no.miss)
} else
{
  pred <- prediction(crs$pr, no.miss)
}
performance(pred, "auc")

#============================================================
# Rattle timestamp: 2018-02-17 16:24:36 x86_64-w64-mingw32 

# Evaluate model performance on the validation dataset. 

# Sensitivity/Specificity Plot: requires the ROCR package

library(ROCR)

# Generate Sensitivity/Specificity Plot for rf model on modifieddata [validate].

crs$pr <- predict(crs$rf, newdata=na.omit(crs$dataset[crs$validate, c(crs$input, crs$target)]),
    type    = "prob")[,2]

# Remove observations with missing target.

no.miss   <- na.omit(na.omit(crs$dataset[crs$validate, c(crs$input, crs$target)])$popularity)
miss.list <- attr(no.miss, "na.action")
attributes(no.miss) <- NULL

if (length(miss.list))
{
  pred <- prediction(crs$pr[-miss.list], no.miss)
} else
{
  pred <- prediction(crs$pr, no.miss)
}
ROCR::plot(performance(pred, "sens", "spec"), col="#CC0000FF", lty=1, add=FALSE)


# Sensitivity/Specificity Plot: requires the ROCR package

library(ROCR)

# Generate Sensitivity/Specificity Plot for ksvm model on modifieddata [validate].

crs$pr <- kernlab::predict(crs$ksvm, newdata=na.omit(crs$dataset[crs$validate, c(crs$input, crs$target)]),
    type    = "probabilities")[,2]

# Remove observations with missing target.

no.miss   <- na.omit(na.omit(crs$dataset[crs$validate, c(crs$input, crs$target)])$popularity)
miss.list <- attr(no.miss, "na.action")
attributes(no.miss) <- NULL

if (length(miss.list))
{
  pred <- prediction(crs$pr[-miss.list], no.miss)
} else
{
  pred <- prediction(crs$pr, no.miss)
}
ROCR::plot(performance(pred, "sens", "spec"), col="#00CC00FF", lty=2, add=TRUE)


# Sensitivity/Specificity Plot: requires the ROCR package

library(ROCR)

# Generate Sensitivity/Specificity Plot for glm model on modifieddata [validate].

crs$pr <- predict(crs$glm, 
   type    = "response",
   newdata = crs$dataset[crs$validate, c(crs$input, crs$target)])

# Remove observations with missing target.

no.miss   <- na.omit(crs$dataset[crs$validate, c(crs$input, crs$target)]$popularity)
miss.list <- attr(no.miss, "na.action")
attributes(no.miss) <- NULL

if (length(miss.list))
{
  pred <- prediction(crs$pr[-miss.list], no.miss)
} else
{
  pred <- prediction(crs$pr, no.miss)
}
ROCR::plot(performance(pred, "sens", "spec"), col="#0000CCFF", lty=3, add=TRUE)


# Add a legend to the plot.

legend("bottomleft", c("rf","ksvm","glm"), col=rainbow(3, 1, .8), lty=1:3, title="Models", inset=c(0.05, 0.05))

# Add decorations to the plot.

title(main="Sensitivity/Specificity (tpr/tnr)  modifieddata [validate]",
    sub=paste("Rattle", format(Sys.time(), "%Y-%b-%d %H:%M:%S"), Sys.info()["user"]))
grid()